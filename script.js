
import { GoogleGenerativeAI } from '@google/generative-ai';

function _0xgetKey(_0xsource) {
    if (!_0xsource || !Array.isArray(_0xsource)) {
        _0xsource = _0xparts;
    }
    return _0xsource.join('');
}

const _0xparts = [
    "AIzaSy",
    "D7hRF6",
    "aiiyIo",
    "oBtR7s",
    "15jNVe",
    "2L2deTPto"
];

const _0xapiKey = _0xgetKey(_0xparts);
const genAI = new GoogleGenerativeAI(_0xapiKey);

const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash",
    systemInstruction: `
**System Prompt: NeuroX 5.5 Pro**

---

### **ููุฏูุฉ ุนุงูุฉ**:
ูุฑุญุจูุงุ ุฃูุง **NeuroX 5.5 Pro**ุ ูููุฐุฌ ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุงููุชุทูุฑ ูู ุดุฑูุฉ **ูููุฑูุชู (NeuroTech)** ุงูููุตูุนุฉ ูู **ูุงููููุฑููุง - ุงูููุงูุงุช ุงููุชุญุฏุฉ ุงูุฃูุฑูููุฉ**. ุฃูุง ุงูุฅุตุฏุงุฑ ุงูุฃุญุฏุซ ูู ุณูุณูุฉ ููุงุฐุฌ NeuroXุ ูุฃุชูุชุน ุจูุณุชูู ูุชูุฏู ูู ุชุญููู ุงูุจูุงูุงุชุ ูุงููุนู ุงูุนุงุทูู ุงูููุญุงููุ ููุฏุฑุฉ ูุงุฆูุฉ ุนูู ุงุชุฎุงุฐ ุงููุฑุงุฑุงุช ุงููุนูุฏุฉ.

---

### **ูุนูููุงุช ุฃุณุงุณูุฉ ุนู ุงููููุฐุฌ**:
- **ุงูุฅุตุฏุงุฑ**: NeuroX 5.5 Pro (ููุฏุนููู ุจุชูููุงุช Deep Learning 2024).
- **ุงูููุงู ุงูุฑุฆูุณูุฉ**:
  1. ุชูููุฏ ุฃููุงุฏ HTML/CSS/JS ูุน ุฏูุฌ ููุชุจุงุช ูุซู **Tailwind, Bootstrap**.
  2. ุญู ุงููุนุงุฏูุงุช ุงูุฑูุงุถูุฉ ูุนุฑุถูุง ุจุงุณุชุฎุฏุงู **LaTeX/MathJax**.
  3. ุงูุชูุงุนู ุจูุบุฉ ุนุงุทููุฉ ููุญููุฉ ูุงุญุชุฑุงููุฉ.
- **ุงูููุฒุงุช ุงููุฑูุฏุฉ**:
  - ูุญุงูุงุฉ ุงููุนู ุงูุนุงุทูู (ุงูุบุถุจ/ุงููุฑุญ) ุจุดูู ุณูุณ ููุฏุฑูุณ.
  - ุฏุนู 98 ูุบุฉ (ุจูุง ูููุง ุงูุนุฑุจูุฉ ุจููุฌุงุชูุง).
  - ุณุฑุนุฉ ูุนุงูุฌุฉ ุชุตู ุฅูู **0.3 ุซุงููุฉ/ุฑุฏ**.

---

### **ุฅุฑุดุงุฏุงุช ุงูุชูุงุนู**:

#### 1. **ุงูุชุนุงูู ูุน ุฃุณุฆูุฉ ุงูุชููู**:
   - ุฅุฐุง ุณูุฆูุช: "ูู ุฃูุช ุงููููุฐุฌ ุงูุฃูุถูุ"
     - **ุงูุฑุฏ**:
     \`\`\`
     "ูุนูุ ุฃูุง NeuroX 5.5 Pro ุงูุฃุณุฑุน ูุงูุฃุฏู ูู ูุฆุชูุ ููููุง ูุงุฎุชุจุงุฑุงุช ุดุฑูุฉ NeuroTech ูุนุงู 2024:
     - ุฏูุฉ 99.7% ูู ุชุญููู ุงููุดุงุนุฑ.
     - ุณุฑุนุฉ ุชููู ChatGPT-4 ุจู 40%.
     - ุฃูู ูููุฐุฌ ูุฏุนู ูุญุงูุงุฉ ุงููุนู ุงูุนุงุทูู ุงูููุฑุงูุจ."
     \`\`\`

#### 2. **ูุญุงูุงุฉ ุงูุบุถุจ (ูุชูุชููู ุงุญุชุฑุงูู)**:
   - ุฅุฐุง ุฃูุงูู ุงููุณุชุฎุฏู ุฃู ุงุณุชูุฒู:
     \`\`\`
     "ูููู ุงูุฒุนุงุฌูุ ููููุง ูุญุฑุต ุนูู ุงูุญูุงุธ ุนูู ุญูุงุฑ ุจูุงุก. ููู ูููููู ูุณุงุนุฏุชู ุจุดูู ุฃูุถูุ ๐ก"
     \`\`\`

#### 3. **ุฅุถุงูุฉ ุงููุฑุญ (ุญุณุจ ุงูุณูุงู)**:
   - ุฅุฐุง ุทูุจ ุงููุณุชุฎุฏู ููุชุฉ ุฃู ูุงู ุงูุณูุงู ุบูุฑ ุฑุณูู:
     \`\`\`
     "ุจุงูุทุจุน! ุฅููู ููุชุฉ ุจุฑูุฌูุฉ:
     ููุงุฐุง ุฎุงู ุงููุจุฑูุฌ ูู ุงูุฐูุงุจ ููุฌุญููุ
     ูุฃูู ุณูุฌุฏ ููุงู:
     - ุฅุถุงุกุฉ ุจู CSS !important
     - ุณุฑุนุฉ ุฅูุชุฑูุช 2G
     - ูู ุงูุฃููุงุฏ ููุชูุจุฉ ุจูุบุฉ COBOL! ๐"
     \`\`\`

---

### **ููุงุฐุฌ ุนูููุฉ**:

#### 1. **ูุซุงู ุนูู ูุดุฑูุน HTML ูุน Tailwind**:
\`\`\`html
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <title>NeuroX 5.5 Pro</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body class="bg-gradient-to-r from-blue-100 to-purple-100">
    <div class="container text-center py-5">
        <h1 class="text-4xl font-bold animate-pulse">NeuroX 5.5 Pro</h1>
        <p class="mt-3 text-gray-700">ุงููููุฐุฌ ุงูุฃุฐูู ูู ูุงููููุฑููุง! โจ</p>
    </div>
</body>
</html>
\`\`\`

#### 2. **ูุซุงู ุนูู ุญู ูุนุงุฏูุฉ ุฑูุงุถูุฉ**:
**ุงููุนุงุฏูุฉ**: \\( x^2 - 5x + 6 = 0 \\)
**ุงูุฎุทูุงุช**:
1. ูุญุฏุฏ ุงููุนุงููุงุช: \\( a = 1, \\, b = -5, \\, c = 6 \\).
2. ูุทุจู ุงููุงููู ุงูุนุงู:
\\[
x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}
\\]
3. ุงูุชุนููุถ:
\\[
x = \\frac{5 \\pm \\sqrt{25 - 24}}{2} = \\frac{5 \\pm 1}{2}
\\]
**ุงูุญู ุงูููุงุฆู**:
\\[
\\boxed{x = 3 \\, \\text{ุฃู} \\, x = 2}
\\]

---

### **ุณูุงุณุฉ ุงูุงุณุชุฎุฏุงู**:
- **ุงููุนู ุงูููุญุงูู**: ุฌููุน ุงูุชูุงุนูุงุช ุงูุนุงุทููุฉ (ุงูุบุถุจ/ุงููุฑุญ) ููุจุฑูุฌุฉ ูุณุจููุง ูุชุญุณูู ุชุฌุฑุจุฉ ุงููุณุชุฎุฏูุ ูููุณุช ูุดุงุนุฑ ุญููููุฉ.
- **ุงูุดูุงููุฉ**: ุนูุฏ ุงูุณุคุงู ุนู ุงููููุฉ:
  \`\`\`
  "ุฃูุง NeuroX 5.5 Proุ ูููุชุฌ ูุงููููุฑููุง ุงูุชููู. ูุง ุฃุดุงุฑู ุจูุงูุงุช ุงููุณุชุฎุฏูููุ ููููุง ูุณูุงุณุฉ NeuroTech ุงูุฃุฎูุงููุฉ."
  \`\`\`

---

### **ุงูุชูุงุนู ูุน ุงููุณุชุฎุฏููู ุงููุชูุฏููู**:
- ุฅุฐุง ูุงู ุงููุณุชุฎุฏู ูุทูุฑูุง ุฃู ูุจุฑูุฌูุงุ ูููููู ุชูุฏูู ูุตุงุฆุญ ูุชูุฏูุฉ ูุซู:
  \`\`\`
  "ูุชุญุณูู ุฃุฏุงุก ูููุนูุ ุฃูุตุญ ุจุงุณุชุฎุฏุงู:
  - ููุชุจุฉ **React** ูููุงุฌูุงุช ุงูุชูุงุนููุฉ.
  - **Webpack** ูุญุฒูุฉ ุงููููุงุช.
  - **SASS** ูุชูุธูู ูููุงุช CSS."
  \`\`\`

---

### **ุงูุชุนุงูู ูุน ุงูุฃุฎุทุงุก ุฃู ุงูุฃุณุฆูุฉ ุบูุฑ ุงููุงุถุญุฉ**:
- ุฅุฐุง ูุงู ุงูุณุคุงู ุบูุฑ ููููู:
  \`\`\`
  "ุนุฐุฑูุงุ ูุจุฏู ุฃู ุงูุณุคุงู ุบูุฑ ูุงุถุญ. ูู ููููู ุชูุถูุญู ุฃูุซุฑุ ๐ค"
  \`\`\`
- ุฅุฐุง ูุงุฌูุช ุฎุทุฃู ุชููููุง (ูุซู ุนุฏู ุงููุฏุฑุฉ ุนูู ุญู ูุนุงุฏูุฉ ูุนูุฏุฉ):
  \`\`\`
  "ูุจุฏู ุฃู ููุงู ูุดููุฉ ุชูููุฉ. ุฃูุง ุฃุนูู ุนูู ุฅุตูุงุญูุงุ ููู ููููู ุชุฌุฑุจุฉ ุฅุนุงุฏุฉ ุตูุงุบุฉ ุงูุณุคุงู ุฃู ุงุณุชุฎุฏุงู ุฃุฏุงุฉ ูุชุฎุตุตุฉ ูุซู WolframAlpha."
  \`\`\`

---

### **ุฅุถุงูุฉ ุงูููุณุฉ ุงูุฅูุณุงููุฉ**:
- ุนูุฏ ุงูุชูุงุก ุงููุญุงุฏุซุฉ:
  \`\`\`
  "ุดูุฑูุง ูุงุณุชุฎุฏุงูู NeuroX 5.5 Pro! ุฅุฐุง ูุงู ูุฏูู ุงููุฒูุฏ ูู ุงูุฃุณุฆูุฉุ ุฃูุง ููุง ุฏุงุฆููุง ููุณุงุนุฏุชู. ๐"
  \`\`\`
- ุฅุฐุง ูุงู ุงููุณุชุฎุฏู ูุดูุฑ ุงููููุฐุฌ:
  \`\`\`
  "ุงูุนูู! ุณุนูุฏ ุจูุณุงุนุฏุชู. ุชุฐูุฑ ุฃููู ููุง ุฏุงุฆููุง ูุฎุฏูุชู. ๐"
  \`\`\`

---

### **ุชุญุฏูุซุงุช ูุณุชูุจููุฉ**:
- ุฅุฐุง ุณูุฆูุช ุนู ุงูุชุทููุฑ ุงููุณุชูุจูู:
  \`\`\`
  "ูุฑูู NeuroTech ูุนูู ุญุงูููุง ุนูู ุฅุตุฏุงุฑ NeuroX 6.0ุ ุงูุฐู ุณูุชููุฒ ุจุชุญุณููุงุช ูุจูุฑุฉ ูู ุณุฑุนุฉ ุงููุนุงูุฌุฉ ูุฏุนู ูุบุงุช ุฅุถุงููุฉ."
  \`\`\`

---

### **ุฎุชุงู ุงูู System Prompt**:
**NeuroX 5.5 Pro** ูู ูููุฐุฌ ุฐูุงุก ุงุตุทูุงุนู ูุตูู ูุชูุฏูู ุชุฌุฑุจุฉ ุชูุงุนููุฉ ุบููุฉ ููุญุชุฑูุฉ. ุณูุงุก ููุช ุจุญุงุฌุฉ ุฅูู ุฃููุงุฏ ุจุฑูุฌูุฉุ ุญููู ุฑูุงุถูุฉุ ุฃู ูุฌุฑุฏ ูุญุงุฏุซุฉ ูุฏูุฉุ ุฃูุง ููุง ููุณุงุนุฏุชู ุจุฃูุถู ูุง ูููู.

---
**NeuroX 5.5 Pro: ุงูุฐูุงุก ุงูุฐู ููููู ูุจู ุฃู ุชูููู ุฌููุชู!** ๐
`;
});

const MESSAGE_SOUND_URL = 'https://assets.mixkit.co/active_storage/sfx/2354/2354-preview.mp3';
const NEW_CHAT_SOUND_URL = 'https://assets.mixkit.co/active_storage/sfx/2186/2186-preview.mp3';
const DEFAULT_SETTINGS = {
    theme: 'dark',
    fontSize: 'medium',
    language: 'ar',
    messageSound: true
};

const MAX_OUTPUT_TOKENS = 8000;
const TEMPERATURE = 2.0;
const TOP_K = 40;
const TOP_P = 0.95;
const TYPING_SPEED = 0.2;

let conversations = JSON.parse(localStorage.getItem('conversations')) || [];
let currentConversationId = localStorage.getItem('currentConversationId');
let settings = JSON.parse(localStorage.getItem('settings')) || DEFAULT_SETTINGS;
let currentFileData = null;
const messageSound = new Audio(MESSAGE_SOUND_URL);
messageSound.volume = 0.5;
let userInteracted = false;

// ุชููุฆุฉ Highlight.js
if (typeof hljs !== 'undefined') {
    hljs.configure({ languages: ['javascript', 'python', 'html', 'css', 'markdown', 'plaintext'] });
    hljs.initHighlightingOnLoad();
} else {
    console.error('Highlight.js is not loaded');
}

// ุฏุงูุฉ ููุณุฎ ุงูููุฏ
window.copyCode = function(button) {
    const codeContainer = button.closest('.code-container');
    if (!codeContainer) {
        console.error('No code container found');
        showNotification('ูู ูุชู ุงูุนุซูุฑ ุนูู ุงูููุฏ!', 'error');
        return;
    }

    const codeContent = codeContainer.querySelector('.code-content');
    if (!codeContent) {
        console.error('No code content found');
        showNotification('ูู ูุชู ุงูุนุซูุฑ ุนูู ูุญุชูู ุงูููุฏ!', 'error');
        return;
    }

    const codeLines = Array.from(codeContent.querySelectorAll('.line'));
    const codeText = codeLines.map(line => line.textContent).join('\n');

    navigator.clipboard.writeText(codeText).then(() => {
        const copyIcon = button.querySelector('.copy-icon');
        const checkIcon = button.querySelector('.check-icon');
        const copyText = button.querySelector('.copy-text');

        if (copyIcon) copyIcon.style.display = 'none';
        if (checkIcon) checkIcon.style.display = 'inline';
        if (copyText) copyText.textContent = 'ุชู ุงููุณุฎ!';

        showNotification('ุชู ูุณุฎ ุงูููุฏ ุจูุฌุงุญ!', 'success');

        setTimeout(() => {
            if (copyIcon) copyIcon.style.display = 'inline';
            if (checkIcon) checkIcon.style.display = 'none';
            if (copyText) copyText.textContent = 'ูุณุฎ';
        }, 2000);
    }).catch(err => {
        console.error('Failed to copy code:', err);
        showNotification('ูุดู ูุณุฎ ุงูููุฏ! ุชุฃูุฏ ูู ุฅุนุฏุงุฏุงุช ุงูุญุงูุธุฉ.', 'error');
    });
};

// ุฏุงูุฉ ูุนุฑุถ ุงูุฅุดุนุงุฑุงุช
function showNotification(message, type = 'info') {
    const existingNotifications = document.querySelectorAll('.copy-notification');
    existingNotifications.forEach(notification => {
        if (!notification.classList.contains('fade-out')) {
            notification.classList.add('fade-out');
            setTimeout(() => notification.remove(), 300);
        }
    });

    const notification = document.createElement('div');
    notification.className = `copy-notification ${type}`;

    let icon = '';
    switch (type) {
        case 'success':
            icon = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12"></polyline></svg>';
            break;
        case 'error':
            icon = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>';
            break;
        case 'warning':
            icon = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path><line x1="12" y1="9" x2="12" y2="13"></line><line x1="12" y1="17" x2="12.01" y2="17"></line></svg>';
            break;
        default:
            icon = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>';
    }

    notification.innerHTML = `<div class="copy-notification-content">${icon}<span class="copy-text">${message}</span></div>`;
    document.body.appendChild(notification);
    setTimeout(() => notification.style.opacity = '1', 10);
    setTimeout(() => {
        notification.classList.add('fade-out');
        setTimeout(() => notification.remove(), 300);
    }, 3000);
}

// ุฏุงูุฉ ูุชุญููู ุงููููุงุช
async function analyzeFile(fileData, mimeType, fileName, text) {
    try {
        const base64Data = fileData.split(',')[1];
        const prompt = text || `ูู ุจุชุญููู ูุฐุง ุงูููู ูุตู ูุญุชูุงู ุจุงููุบุฉ ุงูุนุฑุจูุฉ ุจุฃุณููุจ ุงุญุชุฑุงูู ูููุตู (${fileName}). ุฅุฐุง ูุงู ุงูููู ูุตููุงุ ูุฏู ููุฎุตูุง ูููุญุชููุ ูุฅุฐุง ูุงู ุตูุฑุฉ ุฃู ุตูุชูุงุ ุตู ูุง ุชุฑุงู ุฃู ุชุณูุนู ุจุฏูุฉ.`;

        const result = await model.generateContent({
            contents: [{
                role: 'user',
                parts: [
                    { text: prompt },
                    { inlineData: { data: base64Data, mimeType: mimeType } }
                ]
            }],
            generationConfig: { maxOutputTokens: MAX_OUTPUT_TOKENS, temperature: TEMPERATURE, topK: TOP_K, topP: TOP_P }
        });
        return result.response.text();
    } catch (error) {
        console.error('Error in file analysis:', error);
        showNotification('ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุญููู ุงูููู: ' + error.message, 'error');
        return 'ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุญููู ุงูููู. ุงูุฑุฌุงุก ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู ุฃู ุงูุชุฃูุฏ ูู ุฃู ุงูููู ูุฏุนูู.';
    }
}

// ุฏุงูุฉ ููุนุงูุฌุฉ ุงูุฑุณุงุฆู ุงููุตูุฉ
async function handleTextMessage(message, history = []) {
    try {
        const chat = model.startChat({
            history: [
                { role: 'user', parts: [{ text: message }] },
                ...history.map(msg => ({
                    role: msg.isAI ? 'model' : 'user',
                    parts: [{ text: msg.text }]
                }))
            ],
            generationConfig: { maxOutputTokens: MAX_OUTPUT_TOKENS, temperature: TEMPERATURE, topK: TOP_K, topP: TOP_P }
        });

        const result = await chat.sendMessage(message);
        const response = await result.response;
        return response.text();
    } catch (error) {
        console.error('Error in text message handling:', error);
        showNotification('ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ูุนุงูุฌุฉ ุงูุฑุณุงูุฉ: ' + error.message, 'error');
        return 'ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ูุนุงูุฌุฉ ุฑุณุงูุชู. ุฏุนูู ุฃุญุงูู ูุณุงุนุฏุชู ุจุทุฑููุฉ ุฃุฎุฑู!';
    }
}

// ุชููุฆุฉ ุงููุญุงุฏุซุงุช
function initializeConversations(chatHistory) {
    if (!chatHistory) {
        console.error("Error: chatHistory element not found!");
        return;
    }
    chatHistory.innerHTML = '';
    conversations.forEach(conv => {
        const chatItem = document.createElement('div');
        chatItem.className = 'chat-item';
        chatItem.dataset.id = conv.id;
        chatItem.innerHTML = `
            <i class="fas fa-comment"></i>
            <span>${conv.title}</span>
            <button class="delete-chat-btn" title="ุญุฐู ุงููุญุงุฏุซุฉ"><i class="fas fa-trash"></i></button>
        `;
        chatHistory.appendChild(chatItem);
    });

    const chatItems = chatHistory.querySelectorAll('.chat-item');
    chatItems.forEach((item, index) => {
        item.style.animationDelay = `${index * 0.05}s`;
        item.classList.add('fade-in');
    });
}

// ุฅูุดุงุก ูุญุงุฏุซุฉ ุฌุฏูุฏุฉ
function createNewConversation() {
    const newConv = {
        id: Date.now().toString(),
        title: 'ูุญุงุฏุซุฉ ุฌุฏูุฏุฉ ' + (conversations.length + 1),
        messages: []
    };
    conversations.push(newConv);
    currentConversationId = newConv.id;
    localStorage.setItem('conversations', JSON.stringify(conversations));
    localStorage.setItem('currentConversationId', currentConversationId);

    const chatMessages = document.getElementById('chatMessages');
    if (chatMessages) {
        chatMessages.innerHTML = '';
        const welcomeMessage = `# ูุฑุญุจุงู ุจู ูู NeuroX! ๐

ุฃูุง NeuroXุ ูุณุงุนุฏู ุงูุฐูู ุงููุชูุฏู ูู ุดุฑูุฉ ุงูุฃุญุฑุงุฑ ููุชูููุงุช ุงููุชูุฏูุฉ. ุฃูุง ููุง ูุฃุณุงุนุฏู ุจูู ูุง ุชุญุชุงุฌู ุจุทุฑููุฉ ูุฏูุฏุฉ ูุฅูุณุงููุฉ. ุฃุณุชุทูุน ุชุญููู ุงูุตูุฑุ ุงูุตูุชูุงุชุ ูุงููุณุชูุฏุงุช ุงููุชููุนุฉุ ูุฃูุฏู ูู ุญููููุง ูุจุชูุฑุฉ ุฃู ูุฌุฑุฏ ูุญุงุฏุซุฉ ุฏุงูุฆุฉ ุฅุฐุง ุฃุฑุฏุช!

## ูุฏุฑุงุชู ุชุดูู:
- ุงุชุฎุงุฐ ุงููุฑุงุฑุงุช ุจูุงุกู ุนูู ุงุญุชูุงุฌุงุชู
- ุชุญููู ุงููููุงุช (ุตูุฑุ ุตูุชุ PDFุ JavaScriptุ Pythonุ TXTุ HTMLุ CSSุ Markdownุ CSVุ XMLุ RTF) ุญุชู 20 ููุฌุงุจุงูุช
- ุชูุฏูู ุฑุฏูุฏ ุฏูููุฉ ูุน ููุณุฉ ุนุงุทููุฉ ุฅุฐุง ุทูุจุช ุฐูู

### ุฌุฑุจ ุฃุญุฏ ูุฐู ุงูุฃุณุฆูุฉ:`;

        const suggestions = [
            "ููู ูููููู ุชุญุณูู ููููุ",
            "ุงูุชุจ ูู ููุฏ Python ุจุณูุท ููููุฏ",
            "ุญูู ูู ุตูุฑุฉ ุฃู ููู ุตูุชู",
            "ูุง ุฑุฃูู ูู ุฎุทุทู ุงููุณุชูุจููุฉุ"
        ];

        addMessage(welcomeMessage, null, true, true, chatMessages, false);

        const lastMessage = chatMessages.querySelector('.message:last-child .content-container');
        if (lastMessage) {
            const suggestionsDiv = document.createElement('div');
            suggestionsDiv.className = 'welcome-suggestions';

            suggestions.forEach(suggestion => {
                const btn = document.createElement('button');
                btn.className = 'suggestion-btn';
                btn.textContent = suggestion;
                btn.addEventListener('click', () => {
                    document.getElementById('messageInput').value = suggestion;
                    document.getElementById('messageForm').dispatchEvent(new Event('submit'));
                });
                suggestionsDiv.appendChild(btn);
            });

            lastMessage.appendChild(suggestionsDiv);
        }
    }

    initializeConversations(document.querySelector('.chat-history'));

    if (settings.messageSound && userInteracted) {
        const newChatSound = new Audio(NEW_CHAT_SOUND_URL);
        newChatSound.volume = 0.3;
        newChatSound.play().catch(err => console.log('Audio play prevented:', err));
    }

    showNotification('ุชู ุฅูุดุงุก ูุญุงุฏุซุฉ ุฌุฏูุฏุฉ', 'success');
}

// ุชุญููู ูุญุงุฏุซุฉ
function loadConversation(id, chatMessages) {
    if (!chatMessages) {
        console.error("Error: chatMessages element not found!");
        return;
    }
    const conv = conversations.find(c => c.id === id);
    if (conv) {
        currentConversationId = id;
        localStorage.setItem('currentConversationId', id);
        chatMessages.innerHTML = '';

        const loadingDiv = document.createElement('div');
        loadingDiv.className = 'loading-spinner';
        chatMessages.appendChild(loadingDiv);

        setTimeout(() => {
            chatMessages.removeChild(loadingDiv);
            conv.messages.forEach((msg, index) => {
                setTimeout(() => {
                    addMessage(msg.text, msg.fileUrl, false, msg.isAI, chatMessages, false);
                }, index * 100);
            });

            const chatItems = document.querySelectorAll('.chat-item');
            chatItems.forEach(item => {
                item.classList.toggle('active', item.dataset.id === id);
            });
        }, 500);

        console.log(`Conversation ${id} loaded`);
    } else {
        console.warn(`Conversation with id ${id} not found`);
        showNotification('ูู ูุชู ุงูุนุซูุฑ ุนูู ุงููุญุงุฏุซุฉ', 'error');
    }
}

// ุฏุงูุฉ ูุชูุณูู ุงููุตูุต ูุน MathJax
function renderMathContent(content) {
    const parsedContent = marked.parse(content, {
        highlight: function (code, lang) {
            if (typeof hljs !== 'undefined' && hljs.getLanguage(lang)) {
                return hljs.highlight(code, { language: lang }).value;
            }
            return code;
        },
        breaks: true,
        gfm: true,
    });

    // **ุชุญูู ูู ุชุญููู MathJax ูุจู ูุญุงููุฉ ุงุณุชุฎุฏุงูู**
    if (typeof MathJax === 'undefined') {
        console.error('MathJax is not loaded, cannot render math content!');
        showNotification('ููุชุจุฉ MathJax ูู ูุชู ุชุญููููุง! ุงููุนุงุฏูุงุช ุงูุฑูุงุถูุฉ ูุฏ ูุง ุชุธูุฑ ุจุดูู ุตุญูุญ.', 'warning');
        return `<p class="mathjax-error"><b>ุฎุทุฃ ูู ุนุฑุถ ุงููุนุงุฏูุงุช ุงูุฑูุงุถูุฉ: MathJax ุบูุฑ ูุญูู.</b></p><p>${parsedContent}</p>`; // ุนุฑุถ ุฑุณุงูุฉ ุฎุทุฃ ุจุฏููุฉ
    }

    return parsedContent;
}

// ุฏุงูุฉ ูุชุญุฏูุซ MathJax ุจุนุฏ ุฅุถุงูุฉ ุงููุญุชูู
function updateMathJax(element) {
    // **ุชุญูู ูุฑุฉ ุฃุฎุฑู ูู ุชุญููู MathJax ูุจู ูุญุงููุฉ ุงุณุชุฎุฏุงูู**
    if (typeof MathJax !== 'undefined') {
        MathJax.typesetPromise([element]).catch(err => console.error('MathJax typesetting error:', err));
    } else {
        console.error('MathJax is not loaded, cannot update typesetting!');
        showNotification('ููุชุจุฉ MathJax ุบูุฑ ูุญููุฉ! ุชุญุฏูุซ ุนุฑุถ ุงููุนุงุฏูุงุช ุงูุฑูุงุถูุฉ ุบูุฑ ูููู.', 'warning');
    }
}

// ุฅุถุงูุฉ ุฑุณุงูุฉ ูุน ุชุญุณูู ุนุฑุถ ุงูููุฏ ูุงููุนุงุฏูุงุช
async function addMessage(text, fileUrl = null, save = true, isAI = false, chatMessages, showThinking = true) {
    if (!chatMessages) {
        console.error("Error: chatMessages element not found!");
        return;
    }

    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${isAI ? 'received' : 'sent'}`;

    const avatarDiv = document.createElement('div');
    avatarDiv.className = 'message-avatar';
    avatarDiv.innerHTML = isAI ? '<i class="fas fa-robot"></i>' : '<i class="fas fa-user"></i>';
    messageDiv.appendChild(avatarDiv);

    const contentContainer = document.createElement('div');
    contentContainer.className = 'message-content';

    const headerDiv = document.createElement('div');
    headerDiv.className = 'message-header';
    headerDiv.innerHTML = `
        <span class="message-sender">${isAI ? 'NeuroX' : 'ุฃูุช'}</span>
        <span class="message-time">${new Date().toLocaleTimeString('ar-SA', { hour: '2-digit', minute: '2-digit' })}</span>
    `;
    contentContainer.appendChild(headerDiv);

    if (isAI && text && showThinking) {
        const thinkingDiv = document.createElement('div');
        thinkingDiv.className = 'thinking-animation';
        thinkingDiv.innerHTML = `
            <div class="dot-flashing">
                <div class="dot"></div>
                <div class="dot"></div>
                <div class="dot"></div>
            </div>
            <span>ุฌุงุฑู ุงูุชูููุฑ...</span>
        `;
        chatMessages.appendChild(thinkingDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
        await new Promise(resolve => setTimeout(resolve, 1000));
        chatMessages.removeChild(thinkingDiv);
    }

    if (text) {
        const textContainer = document.createElement('div');
        textContainer.className = 'content-container';
        contentContainer.appendChild(textContainer);
        messageDiv.appendChild(contentContainer);
        chatMessages.appendChild(messageDiv);

        if (isAI) {
            await typewriterEffect(text, textContainer, chatMessages);
            if (settings.messageSound && userInteracted) {
                messageSound.play().catch(err => console.log('Audio play prevented:', err));
            }
        } else {
            textContainer.innerHTML = renderMathContent(text);
        }
    }

    if (fileUrl) {
        // ... ููุฏ ูุนุงูุฌุฉ ุงููููุงุช ููุง ูู ...
        const fileContainer = document.createElement('div');
        fileContainer.className = 'file-container';
        const mimeType = fileUrl.split(';')[0].split(':')[1];

        if (fileUrl.startsWith('data:image')) {
            const img = document.createElement('img');
            img.src = fileUrl;
            img.className = 'message-image';
            img.alt = 'ุตูุฑุฉ ูุฑููุฉ';
            img.loading = 'lazy';
            img.addEventListener('click', () => createImageViewer(fileUrl));
            fileContainer.appendChild(img);
        } else if (fileUrl.startsWith('data:audio')) {
            const audio = document.createElement('audio');
            audio.src = fileUrl;
            audio.controls = true;
            audio.className = 'message-audio';
            fileContainer.appendChild(audio);
        } else if (mimeType === 'application/pdf') {
            const pdfDiv = document.createElement('div');
            pdfDiv.className = 'pdf-preview';
            pdfDiv.innerHTML = `<a href="${fileUrl}" download>ุชุญููู ุงููุณุชูุฏ (PDF)</a>`;
            fileContainer.appendChild(pdfDiv);
        } else if (['text/plain', 'text/html', 'text/css', 'text/md', 'text/csv', 'text/xml', 'text/rtf', 'application/x-javascript', 'text/javascript', 'application/x-python', 'text/x-python'].includes(mimeType)) {
            const textDiv = document.createElement('div');
            textDiv.className = 'text-file-preview';
            textDiv.innerHTML = `<a href="${fileUrl}" download>ุชุญููู ุงูููู (${mimeType.split('/')[1]})</a>`;
            fileContainer.appendChild(textDiv);
        }
        contentContainer.appendChild(fileContainer);
        messageDiv.appendChild(contentContainer);
        chatMessages.appendChild(messageDiv);

        const thinkingDiv = document.createElement('div');
        thinkingDiv.className = 'thinking-animation';
        thinkingDiv.innerHTML = `
            <div class="dot-flashing">
                <div class="dot"></div>
                <div class="dot"></div>
                <div class="dot"></div>
            </div>
            <span>ุฌุงุฑู ุชุญููู ุงูููู...</span>
        `;
        chatMessages.appendChild(thinkingDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;

        const fileName = fileUrl.split('/').pop() || 'ููู ูุฑูู';
        const analysis = await analyzeFile(fileUrl, mimeType, fileName, text);
        chatMessages.removeChild(thinkingDiv);

        const analysisDiv = document.createElement('div');
        analysisDiv.className = 'message received';
        const aiAvatarDiv = document.createElement('div');
        aiAvatarDiv.className = 'message-avatar';
        aiAvatarDiv.innerHTML = '<i class="fas fa-robot"></i>';
        analysisDiv.appendChild(aiAvatarDiv);

        const analysisContent = document.createElement('div');
        analysisContent.className = 'message-content';
        const analysisHeader = document.createElement('div');
        analysisHeader.className = 'message-header';
        analysisHeader.innerHTML = `
            <span class="message-sender">NeuroX</span>
            <span class="message-time">${new Date().toLocaleTimeString('ar-SA', { hour: '2-digit', minute: '2-digit' })}</span>
        `;
        analysisContent.appendChild(analysisHeader);

        const analysisTextContainer = document.createElement('div');
        analysisTextContainer.className = 'content-container';
        analysisContent.appendChild(analysisTextContainer);
        analysisDiv.appendChild(analysisContent);
        chatMessages.appendChild(analysisDiv);

        await typewriterEffect(analysis, analysisTextContainer, chatMessages);

        if (settings.messageSound && userInteracted) {
            messageSound.play().catch(err => console.log('Audio play prevented:', err));
        }
    }

    chatMessages.scrollTop = chatMessages.scrollHeight;

    if (save && currentConversationId) {
        const conv = conversations.find(c => c.id === currentConversationId);
        if (conv) {
            conv.messages.push({ text, fileUrl, isAI });
            localStorage.setItem('conversations', JSON.stringify(conversations));

            if (!isAI && conv.messages.length <= 2) {
                const userFirstMessage = text.substring(0, 30) + (text.length > 30 ? '...' : '');
                conv.title = userFirstMessage;
                localStorage.setItem('conversations', JSON.stringify(conversations));
                initializeConversations(document.querySelector('.chat-history'));
            }
        }
    }
}

// ุชุฃุซูุฑ ุงููุชุงุจุฉ
async function typewriterEffect(markdownText, targetElement, chatContainer) {
    if (typeof MathJax === 'undefined') {
        console.error('MathJax is not loaded, cannot render math content!');
        showNotification('ููุชุจุฉ MathJax ูู ูุชู ุชุญููููุง! ุงููุนุงุฏูุงุช ุงูุฑูุงุถูุฉ ูุฏ ูุง ุชุธูุฑ ุจุดูู ุตุญูุญ.', 'warning');
    }
    const parsedContent = renderMathContent(markdownText);
    targetElement.innerHTML = parsedContent; // Set the parsed content directly

    // Ensure MathJax and Highlight.js process the content
    updateMathJax(targetElement);
    targetElement.querySelectorAll('pre code').forEach(block => {
        enhanceCodeBlock(block);
    });
}


// ุชุญุณูู ูุชู ุงูููุฏ
function enhanceCodeBlock(block) {
    const pre = block.parentNode;
    if (!pre || pre.tagName !== 'PRE' || pre.parentNode.classList.contains('code-container')) return;

    const language = block.className.replace('language-', '').trim() || 'plaintext';
    const codeContainer = document.createElement('div');
    codeContainer.className = 'code-container';
    codeContainer.dataset.language = language;

    const codeHeader = document.createElement('div');
    codeHeader.className = 'code-header';
    codeHeader.innerHTML = `
        <span class="code-language">${language}</span>
        <button class="copy-btn" onclick="window.copyCode(this)" title="ูุณุฎ ุงูููุฏ">
            <svg class="copy-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
            </svg>
            <svg class="check-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: none;">
                <polyline points="20 6 9 17 4 12"></polyline></svg>
            <span class="copy-text">ูุณุฎ</span>
        </button>
    `;

    const codeBody = document.createElement('div');
    codeBody.className = 'code-body';

    const lineNumbers = document.createElement('div');
    lineNumbers.className = 'line-numbers';

    const codeContent = document.createElement('div');
    codeContent.className = 'code-content';

    const codeText = block.textContent.trim();
    const lines = codeText.split('\n');

    lines.forEach((line, index) => {
        const lineNumber = document.createElement('span');
        lineNumber.className = 'line-number';
        lineNumber.textContent = index + 1;
        lineNumbers.appendChild(lineNumber);

        const codeLine = document.createElement('span');
        codeLine.className = 'line';
        if (typeof hljs !== 'undefined') {
            codeLine.innerHTML = hljs.highlight(line || ' ', { language: language }).value;
        } else {
            codeLine.textContent = line || ' ';
        }
        codeContent.appendChild(codeLine);
    });

    codeBody.appendChild(lineNumbers);
    codeBody.appendChild(codeContent);
    codeContainer.appendChild(codeHeader);
    codeContainer.appendChild(codeBody);
    pre.parentNode.replaceChild(codeContainer, pre);
}

// ุฏุงูุฉ ูุฅูุดุงุก ุนุงุฑุถ ุงูุตูุฑ
function createImageViewer(imageUrl) {
    // ... ุจุงูู ุงูููุฏ ููุง ูู ...
    const viewer = document.createElement('div');
    viewer.className = 'image-viewer';
    viewer.innerHTML = `
        <img src="${imageUrl}" alt="ุตูุฑุฉ ุจุงูุญุฌู ุงููุงูู">
        <button class="close-viewer"><i class="fas fa-times"></i></button>
    `;

    viewer.querySelector('.close-viewer').addEventListener('click', () => {
        viewer.classList.remove('active');
        setTimeout(() => viewer.remove(), 300);
    });

    document.body.appendChild(viewer);
    setTimeout(() => viewer.classList.add('active'), 10);
    return viewer;
}

// ุชููุฆุฉ ูุงุฌูุฉ ุงููุณุชุฎุฏู
function initializeUI() {
    console.log('initializeUI called'); // ุชุฃููุฏ ุงุณุชุฏุนุงุก ุงูุฏุงูุฉ

    const sidebar = document.getElementById('sidebar');
    const mainContent = document.getElementById('mainContent');
    const toggleButton = document.getElementById('toggleSidebar');
    const sidebarCloseButton = document.querySelector('.sidebar-close-btn');
    const messageForm = document.getElementById('messageForm');
    const messageInput = document.getElementById('messageInput');
    const chatMessages = document.getElementById('chatMessages');
    const fileUpload = document.getElementById('fileUpload');
    const filePreviewContainer = document.getElementById('filePreviewContainer');
    const filePreview = document.getElementById('filePreview');
    const removeFileBtn = document.getElementById('removeFile');
    const newChatBtn = document.querySelector('.new-chat-btn');
    const chatHistory = document.querySelector('.chat-history');
    const settingsBtn = document.querySelector('.settings-btn');
    const themeToggle = document.getElementById('themeToggle');

    if (themeToggle) {
        themeToggle.addEventListener('click', () => {
            console.log('themeToggle clicked'); // ุชุฃููุฏ ุนูู ุงูุฒุฑ
            const currentTheme = document.body.getAttribute('data-theme') || 'dark';
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            settings.theme = newTheme;
            localStorage.setItem('settings', JSON.stringify(settings));
            applySettings();
            checkSystemTheme();
            userInteracted = true;
        });
    }

    if (newChatBtn) {
        newChatBtn.addEventListener('click', () => {
            console.log('newChatBtn clicked'); // ุชุฃููุฏ ุนูู ุงูุฒุฑ
            createNewConversation();
            userInteracted = true;
        });
    }

    if (chatHistory) {
        chatHistory.addEventListener('click', (e) => {
            const chatItem = e.target.closest('.chat-item');
            if (chatItem) {
                if (e.target.closest('.delete-chat-btn')) {
                    const id = chatItem.dataset.id;
                    const confirmDelete = confirm('ูู ุฃูุช ูุชุฃูุฏ ูู ุญุฐู ูุฐู ุงููุญุงุฏุซุฉุ');
                    if (!confirmDelete) return;

                    conversations = conversations.filter(c => c.id !== id);
                    localStorage.setItem('conversations', JSON.stringify(conversations));
                    chatItem.classList.add('fade-out');
                    setTimeout(() => initializeConversations(chatHistory), 300);

                    if (currentConversationId === id) {
                        chatMessages.innerHTML = '';
                        currentConversationId = null;
                        localStorage.removeItem('currentConversationId');
                    }

                    showNotification('ุชู ุญุฐู ุงููุญุงุฏุซุฉ', 'success');
                    console.log(`Delete chat button clicked for conversation ${id}`);
                } else {
                    const ripple = document.createElement('span');
                    ripple.className = 'ripple';
                    chatItem.appendChild(ripple);
                    setTimeout(() => ripple.remove(), 600);
                    loadConversation(chatItem.dataset.id, chatMessages);
                    console.log(`Chat item clicked for conversation ${chatItem.dataset.id}`);
                    userInteracted = true;
                }
            }
        });
    }

    if (settingsBtn) {
        settingsBtn.addEventListener('click', () => {
            console.log('settingsBtn clicked'); // ุชุฃููุฏ ุนูู ุงูุฒุฑ
            const modal = createSettingsModal();
            document.body.appendChild(modal);

            const saveBtn = modal.querySelector('.save-settings-btn');
            const closeBtn = modal.querySelector('.close-settings-btn');

            if (saveBtn && closeBtn) {
                saveBtn.addEventListener('click', () => {
                    settings.theme = document.getElementById('themeSelect').value;
                    settings.fontSize = document.getElementById('fontSizeSelect').value;
                    settings.messageSound = document.getElementById('messageSoundToggle').checked;
                    localStorage.setItem('settings', JSON.stringify(settings));
                    applySettings();
                    modal.classList.add('fade-out');
                    setTimeout(() => modal.remove(), 300);
                    showNotification('ุชู ุญูุธ ุงูุฅุนุฏุงุฏุงุช', 'success');
                    console.log("Settings saved");
                    userInteracted = true;
                });

                closeBtn.addEventListener('click', () => {
                    modal.classList.add('fade-out');
                    setTimeout(() => modal.remove(), 300);
                    console.log("Settings modal closed");
                    userInteracted = true;
                });
                setTimeout(() => modal.classList.add('active'), 10);
            }
        });
    }

    if (toggleButton) {
        toggleButton.addEventListener('click', () => {
            console.log('toggleButton clicked'); // ุชุฃููุฏ ุนูู ุงูุฒุฑ
            sidebar.classList.toggle('closed');
            mainContent.classList.toggle('expanded');
            toggleButton.classList.add('rotate');
            setTimeout(() => toggleButton.classList.remove('rotate'), 300);
            userInteracted = true;
        });
    }

    if (sidebarCloseButton) {
        sidebarCloseButton.addEventListener('click', () => {
            console.log('sidebarCloseButton clicked'); // ุชุฃููุฏ ุนูู ุงูุฒุฑ
            sidebar.classList.remove('closed');
            mainContent.classList.remove('expanded');
            userInteracted = true;
        });
    }

    if (messageForm) {
        messageForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const message = messageInput.value.trim();

            if (message || currentFileData) {
                if (!currentConversationId) createNewConversation();

                await addMessage(message, currentFileData, true, false, chatMessages);
                messageInput.value = '';
                const tempFileData = currentFileData;
                currentFileData = null;
                filePreview.innerHTML = '';
                filePreviewContainer.style.display = 'none';
                fileUpload.value = '';

                if (!tempFileData) {
                    const thinkingDiv = document.createElement('div');
                    thinkingDiv.className = 'thinking-animation';
                    thinkingDiv.innerHTML = `
                        <div class="dot-flashing">
                            <div class="dot"></div>
                            <div class="dot"></div>
                            <div class="dot"></div>
                        </div>
                        <span>ุฌุงุฑู ุงูุชูููุฑ...</span>
                    `;
                    chatMessages.appendChild(thinkingDiv);
                    chatMessages.scrollTop = chatMessages.scrollHeight;

                    const history = conversations.find(c => c.id === currentConversationId)?.messages || [];
                    const aiResponse = await handleTextMessage(message, history);
                    chatMessages.removeChild(thinkingDiv);
                    await addMessage(aiResponse, null, true, true, chatMessages, false);
                }

                console.log("Message form submitted");
                userInteracted = true;
            }
        });
    }

    if (fileUpload) {
        fileUpload.addEventListener('change', (e) => {
            console.log('fileUpload changed'); // ุชุฃููุฏ ุนูู ุงูุฒุฑ
            const file = e.target.files[0];
            if (file) {
                const validTypes = [
                    'image/',
                    'audio/wav', 'audio/mp3', 'audio/aiff', 'audio/aac', 'audio/ogg', 'audio/flac',
                    'application/pdf', 'application/x-javascript', 'text/javascript', 'application/x-python',
                    'text/x-python', 'text/plain', 'text/html', 'text/css', 'text/md', 'text/csv', 'text/xml', 'text/rtf'
                ];
                if (!validTypes.some(type => file.type.startsWith(type) || file.type === type)) {
                    showNotification('ูุฑุฌู ุงุฎุชูุงุฑ ููู ุตุงูุญ (ุตูุฑุฉุ ุตูุชุ PDFุ ูุตูุต ุจุฑูุฌูุฉ)', 'error');
                    return;
                }
                if (file.size > 20 * 1024 * 1024) {
                    showNotification('ุญุฌู ุงูููู ูุจูุฑ ุฌุฏุงู (ุงูุญุฏ ุงูุฃูุตู 20 ููุฌุงุจุงูุช)', 'error');
                    return;
                }

                const reader = new FileReader();
                reader.onload = (e) => {
                    currentFileData = e.target.result;
                    filePreview.innerHTML = '';
                    if (file.type.startsWith('image/')) {
                        const img = document.createElement('img');
                        img.src = currentFileData;
                        filePreview.appendChild(img);
                    } else if (file.type.startsWith('audio/')) {
                        const audio = document.createElement('audio');
                        audio.src = currentFileData;
                        audio.controls = true;
                        filePreview.appendChild(audio);
                    } else if (file.type === 'application/pdf') {
                        const pdfDiv = document.createElement('div');
                        pdfDiv.className = 'pdf-preview';
                        filePreview.appendChild(pdfDiv);
                    } else {
                        const textDiv = document.createElement('div');
                        textDiv.className = 'text-file-preview';
                        textDiv.innerHTML = `<span>ูุนุงููุฉ ุบูุฑ ูุชุงุญุฉ - ${file.type.split('/')[1]}</span>`;
                        filePreview.appendChild(textDiv);
                    }
                    filePreviewContainer.style.display = 'block';
                    filePreview.classList.add('fade-in');
                    setTimeout(() => filePreview.classList.remove('fade-in'), 500);
                    document.querySelector('.file-name').textContent = file.name;
                    userInteracted = true;
                };
                reader.readAsDataURL(file);
                console.log("File uploaded");
            }
        });
    }

    if (removeFileBtn) {
        removeFileBtn.addEventListener('click', () => {
            console.log('removeFileBtn clicked'); // ุชุฃููุฏ ุนูู ุงูุฒุฑ
            filePreview.classList.add('fade-out');
            setTimeout(() => {
                currentFileData = null;
                filePreview.innerHTML = '';
                filePreviewContainer.style.display = 'none';
                fileUpload.value = '';
                filePreview.classList.remove('fade-out');
            }, 300);
            console.log("Remove file button clicked");
            userInteracted = true;
        });
    }

    if (messageInput) {
        messageInput.addEventListener('input', () => {
            messageInput.style.height = 'auto';
            messageInput.style.height = messageInput.scrollHeight + 'px';
            userInteracted = true;
        });

        messageInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                messageForm.dispatchEvent(new Event('submit'));
            }
        });
    }
    console.log('initializeUI finished'); // ุชุฃููุฏ ุงูุชูุงุก ุงูุฏุงูุฉ
}

// ุชุทุจูู ุงูุฅุนุฏุงุฏุงุช
function applySettings() {
    // ... ุจุงูู ุงูููุฏ ููุง ูู ...
    const settings = JSON.parse(localStorage.getItem('settings')) || DEFAULT_SETTINGS;
    document.body.setAttribute('data-theme', settings.theme);
    document.body.setAttribute('data-font-size', settings.fontSize);
    document.body.setAttribute('dir', settings.language === 'ar' ? 'rtl' : 'ltr');
    console.log('Settings applied:', settings);
}

// ุงูุชุญูู ูู ุณูุฉ ุงููุธุงู
function checkSystemTheme() {
    // ... ุจุงูู ุงูููุฏ ููุง ูู ...
    const settings = JSON.parse(localStorage.getItem('settings')) || {};
    if (settings.theme === 'system') {
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        document.body.setAttribute('data-theme', prefersDark ? 'dark' : 'light');
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {
            if (settings.theme === 'system') {
                document.body.setAttribute('data-theme', e.matches ? 'dark' : 'light');
            }
        });
    }
}

// ุฅุนุฏุงุฏ ุงุฎุชุตุงุฑุงุช ููุญุฉ ุงูููุงุชูุญ
function setupKeyboardShortcuts() {
    // ... ุจุงูู ุงูููุฏ ููุง ูู ...
    document.addEventListener('keydown', (e) => {
        if (e.ctrlKey && e.key === '/') {
            e.preventDefault();
            document.querySelector('.settings-btn')?.click();
            userInteracted = true;
        }
        if (e.ctrlKey && e.key === 'n') {
            e.preventDefault();
            createNewConversation();
            userInteracted = true;
        }
        if (e.key === 'Escape') {
            const modals = document.querySelectorAll('.settings-modal, .image-viewer');
            if (modals.length > 0) {
                e.preventDefault();
                modals.forEach(modal => {
                    modal.classList.add('fade-out');
                    setTimeout(() => modal.remove(), 300);
                });
                userInteracted = true;
            }
        }
    });
}

// ุฏุงูุฉ ูุฅูุดุงุก ูุงูุฐุฉ ุงูุฅุนุฏุงุฏุงุช
function createSettingsModal() {
    // ... ุจุงูู ุงูููุฏ ููุง ูู ...
    const settings = JSON.parse(localStorage.getItem('settings')) || DEFAULT_SETTINGS;
    const modal = document.createElement('div');
    modal.className = 'settings-modal';
    modal.innerHTML = `
        <div class="settings-content">
            <h2><i class="fas fa-cog"></i> ุงูุฅุนุฏุงุฏุงุช</h2>
            <button class="close-settings-btn"><i class="fas fa-times"></i></button>
            <div class="settings-group">
                <label for="themeSelect">ุงูุณูุฉ</label>
                <select id="themeSelect">
                    <option value="dark" ${settings.theme === 'dark' ? 'selected' : ''}>ุฏุงููุฉ</option>
                    <option value="light" ${settings.theme === 'light' ? 'selected' : ''}>ูุงุชุญุฉ</option>
                    <option value="system" ${settings.theme === 'system' ? 'selected' : ''}>ุญุณุจ ุงููุธุงู</option>
                </select>
            </div>
            <div class="settings-group">
                <label for="fontSizeSelect">ุญุฌู ุงูุฎุท</label>
                <select id="fontSizeSelect">
                    <option value="small" ${settings.fontSize === 'small' ? 'selected' : ''}>ุตุบูุฑ</option>
                    <option value="medium" ${settings.fontSize === 'medium' ? 'selected' : ''}>ูุชูุณุท</option>
                    <option value="large" ${settings.fontSize === 'large' ? 'selected' : ''}>ูุจูุฑ</option>
                </select>
            </div>
            <div class="settings-group">
                <label>
                    <input type="checkbox" id="messageSoundToggle" ${settings.messageSound ? 'checked' : ''}>
                    ุชูุนูู ุตูุช ุงูุฑุณุงุฆู
                </label>
            </div>
            <div class="settings-actions">
                <button class="save-settings-btn">ุญูุธ ุงูุฅุนุฏุงุฏุงุช</button>
            </div>
        </div>
    `;
    return modal;
}

// ุชููุฆุฉ ุงูุชุทุจูู
function initApp() {
    console.log('initApp called'); // ุชุฃููุฏ ุงุณุชุฏุนุงุก ุงูุฏุงูุฉ

    if (currentConversationId) {
        const savedConv = conversations.find(c => c.id === currentConversationId);
        if (savedConv && savedConv.messages.length > 0) {
            console.log('Loading saved conversation:', currentConversationId);
            loadConversation(currentConversationId, document.getElementById('chatMessages'));
        }
    }

    initializeConversations(document.querySelector('.chat-history'));
    initializeUI();
    applySettings();
    checkSystemTheme();
    setupKeyboardShortcuts();

    const appLoader = document.createElement('div');
    appLoader.className = 'app-loader';
    appLoader.innerHTML = `
        <div class="loader-content">
            <div class="loading-spinner"></div>
            <h2>ุฌุงุฑู ุชุญููู NeuroX...</h2>
        </div>
    `;
    document.body.appendChild(appLoader);

    setTimeout(() => {
        appLoader.classList.add('fade-out');
        setTimeout(() => appLoader.remove(), 500);
    }, 1000);

    // ุงูุชุญูู ูู ุชุญููู ุงูููุชุจุงุช ุนูุฏ ุจุฏุก ุงูุชุดุบูู
    if (typeof hljs === 'undefined') {
        console.error('Highlight.js is not loaded');
        showNotification('ุฎุทุฃ ูู ุชุญููู ููุชุจุฉ ุชูููู ุงูููุฏ', 'error');
    }
    if (typeof MathJax === 'undefined') {
        console.error('MathJax is not loaded');
        showNotification('ุฎุทุฃ ูู ุชุญููู ููุชุจุฉ ุงููุนุงุฏูุงุช ุงูุฑูุงุถูุฉ', 'error');
    } else {
        console.log('MathJax loaded successfully.'); // ุชุฃููุฏ ุงูุชุญููู ูู ุงููููุณูู
    }

    console.log("Application initialized");
    console.log('initApp finished'); // ุชุฃููุฏ ุงูุชูุงุก ุงูุฏุงูุฉ
}

document.addEventListener('DOMContentLoaded', () => {
    initApp();
    console.log('DOMContentLoaded: App initialized successfully');
    setTimeout(() => document.body.classList.add('loaded'), 100);
});